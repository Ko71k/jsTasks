// Реализовать создание следующую запись ;]
function generateRomanNumerals(max) {
    const romanNumerals = [];
    const romanNumeralMap = [
        { value: 1000, numeral: 'M' },
        { value: 900, numeral: 'CM' },
        { value: 500, numeral: 'D' },
        { value: 400, numeral: 'CD' },
        { value: 100, numeral: 'C' },
        { value: 90, numeral: 'XC' },
        { value: 50, numeral: 'L' },
        { value: 40, numeral: 'XL' },
        { value: 10, numeral: 'X' },
        { value: 9, numeral: 'IX' },
        { value: 5, numeral: 'V' },
        { value: 4, numeral: 'IV' },
        { value: 1, numeral: 'I' }
    ];

    for (let i = 1; i <= max; i++) {
        let roman = '';
        let num = i;

        for (const { value, numeral } of romanNumeralMap) {
            while (num >= value) {
                roman += numeral;
                num -= value;
            }
        }

        romanNumerals.push(roman);
    }

    return romanNumerals;
}

// Example usage
const romanNumericals = generateRomanNumerals(10);

// Function to convert Roman numeral to decimal
function romanToDecimal(roman) {
    const romanNumeralMap = {
        'I': 1,
        'V': 5,
        'X': 10,
        'L': 50,
        'C': 100,
        'D': 500,
        'M': 1000
    };

    return roman.split('').reduce((acc, curr, index, arr) => {
        const currentVal = romanNumeralMap[curr];
        const nextVal = romanNumeralMap[arr[index + 1]] || 0;

        return acc + (currentVal < nextVal ? -currentVal : currentVal);
    }, 0);
}

// Define properties for each Roman numeral
for (const str of romanNumericals) {
    Object.defineProperty(Number.prototype, str, {
        get: function() {
            return Array.from({ length: romanToDecimal(str) }, (_, i) => i); // [0, 1, 2, ..., n-1]
        },
    });
}
console.log(0..V); // [0, 1, 2, 3, 4];
console.log(0..VII); // [0, 1, 2, 3, 4, 5, 6];

